% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data_access_functions.R
\name{access_data_get_x_from_arcgis_rest_api_geojson_parallel}
\alias{access_data_get_x_from_arcgis_rest_api_geojson_parallel}
\title{Fetch Data from an ArcGIS REST API Endpoint with Pagination (Parallel Version)}
\usage{
access_data_get_x_from_arcgis_rest_api_geojson_parallel(
  base_url,
  query_params,
  max_record,
  n,
  timeout,
  n_cores = NA
)
}
\arguments{
\item{base_url}{A character string. The base URL of the ArcGIS REST API endpoint.}

\item{query_params}{A list. Query parameters to be used in the API request. The list should contain the necessary
parameters required by the API, such as `where`, `outFields`, and `f`.}

\item{max_record}{An integer. The maximum number of records that can be fetched in a single API request. This value is
usually defined by the ArcGIS REST API server limitations.}

\item{n}{An integer or character. Specifies the total number of entries to fetch. If `"all"`, the function fetches
all available records from the API. If an integer, it specifies the exact number of records to fetch.}

\item{timeout}{An integer. The time in seconds to wait before timing out the request.}

\item{n_cores}{An integer or `NA`. Specifies the number of cores to use for parallel processing. If `NA` (default), the
function will use the default number of available cores.}
}
\value{
An `sf` object. A Simple Features (sf) object containing the fetched data.
}
\description{
This function retrieves geojson data from an ArcGIS REST API endpoint using pagination, optimized for parallel processing.
It supports fetching a specified number of entries or all available entries from the API endpoint, with the ability to
specify the number of cores for parallel processing.
}
\examples{
\dontrun{
base_url <- "https://example.com/arcgis/rest/services/your_service/FeatureServer/0/query"
query_params <- list(where = "1=1", outFields = "*", f = "geojson")
max_record <- 100
n <- 500  # Can also be "all"
result <- access_data_get_x_from_arcgis_rest_api_geojson_parallel(base_url, query_params, max_record, n, timeout = 60)
print(result)
}
}
